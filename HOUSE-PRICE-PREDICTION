{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-25T09:06:23.057404Z","iopub.execute_input":"2024-05-25T09:06:23.057844Z","iopub.status.idle":"2024-05-25T09:06:24.202369Z","shell.execute_reply.started":"2024-05-25T09:06:23.057808Z","shell.execute_reply":"2024-05-25T09:06:24.201163Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"################################################################\n# Ev Fiyat Tahmin Modeli\n################################################################","metadata":{}},{"cell_type":"markdown","source":"# Görev\n# Elimizdeki veri seti üzerinden minimum hata ile ev fiyatlarını tahmin eden bir makine öğrenmesi modeli geliştiriniz ve kaggle yarışmasına tahminlerinizi yükleyiniz.\n# https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/overview/evaluation\n","metadata":{}},{"cell_type":"markdown","source":"# 1. GEREKLILIKLER","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.exceptions import ConvergenceWarning\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:24.204535Z","iopub.execute_input":"2024-05-25T09:06:24.205327Z","iopub.status.idle":"2024-05-25T09:06:27.923900Z","shell.execute_reply.started":"2024-05-25T09:06:24.205285Z","shell.execute_reply":"2024-05-25T09:06:27.922937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"warnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(\"ignore\", category=ConvergenceWarning)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:27.925079Z","iopub.execute_input":"2024-05-25T09:06:27.925781Z","iopub.status.idle":"2024-05-25T09:06:27.931897Z","shell.execute_reply.started":"2024-05-25T09:06:27.925741Z","shell.execute_reply":"2024-05-25T09:06:27.930760Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)\npd.set_option('display.width', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:27.935122Z","iopub.execute_input":"2024-05-25T09:06:27.935962Z","iopub.status.idle":"2024-05-25T09:06:27.948358Z","shell.execute_reply.started":"2024-05-25T09:06:27.935921Z","shell.execute_reply":"2024-05-25T09:06:27.947340Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# GÖREV 1 : Veri setine EDA işlemlerini uygulayınız.\n######################################","metadata":{}},{"cell_type":"markdown","source":"# 1. Genel Resim\n# 2. Kategorik Değişken Analizi (Analysis of Categorical Variables)\n# 3. Sayısal Değişken Analizi (Analysis of Numerical Variables)\n# 4. Hedef Değişken Analizi (Analysis of Target Variable)\n# 5. Korelasyon Analizi (Analysis of Correlation)","metadata":{}},{"cell_type":"markdown","source":"################################################################\n# Adım 1: Train ve Test veri setlerini okutup birleştiriniz. Birleştirdiğiniz veri üzerinden ilerleyiniz.\n################################################################","metadata":{}},{"cell_type":"code","source":"# train ve test setlerinin bir araya getirilmesi.\n#train = pd.read_csv(\"datasets/housePrice/house_price_train.csv\")\n#test = pd.read_csv(\"datasets/housePrice/house_price_test.csv\")\ntrain = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\n\ndf = pd.concat([train,test]).reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:27.949774Z","iopub.execute_input":"2024-05-25T09:06:27.950412Z","iopub.status.idle":"2024-05-25T09:06:28.062890Z","shell.execute_reply.started":"2024-05-25T09:06:27.950383Z","shell.execute_reply":"2024-05-25T09:06:28.061771Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.064562Z","iopub.execute_input":"2024-05-25T09:06:28.065272Z","iopub.status.idle":"2024-05-25T09:06:28.146057Z","shell.execute_reply.started":"2024-05-25T09:06:28.065240Z","shell.execute_reply":"2024-05-25T09:06:28.144861Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df.drop(\"Id\", axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.147541Z","iopub.execute_input":"2024-05-25T09:06:28.147961Z","iopub.status.idle":"2024-05-25T09:06:28.156366Z","shell.execute_reply.started":"2024-05-25T09:06:28.147923Z","shell.execute_reply":"2024-05-25T09:06:28.155442Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.157489Z","iopub.execute_input":"2024-05-25T09:06:28.157967Z","iopub.status.idle":"2024-05-25T09:06:28.222903Z","shell.execute_reply.started":"2024-05-25T09:06:28.157940Z","shell.execute_reply":"2024-05-25T09:06:28.221585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# 1. Genel Resim\n######################################","metadata":{}},{"cell_type":"code","source":"def check_df(dataframe):\n    print(\"##################### Shape #####################\")\n    print(dataframe.shape)\n    print(\"##################### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"##################### Head #####################\")\n    print(dataframe.head(3))\n    print(\"##################### Tail #####################\")\n    print(dataframe.tail(3))\n    print(\"##################### NA #####################\")\n    print(dataframe.isnull().sum())\n    print(\"##################### Quantiles #####################\")\n    #print(dataframe.quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \n    numeric_columns = dataframe.select_dtypes(include=[np.number]).columns\n    print(dataframe[numeric_columns].quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)\n    \n\n\ncheck_df(df)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.224275Z","iopub.execute_input":"2024-05-25T09:06:28.224643Z","iopub.status.idle":"2024-05-25T09:06:28.312960Z","shell.execute_reply.started":"2024-05-25T09:06:28.224607Z","shell.execute_reply":"2024-05-25T09:06:28.310427Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##################################\n# NUMERİK VE KATEGORİK DEĞİŞKENLERİN YAKALANMASI\n##################################","metadata":{}},{"cell_type":"code","source":"def grab_col_names(dataframe, cat_th=10, car_th=20):\n    \"\"\"\n    grab_col_names for given dataframe\n\n    :param dataframe: The pandas DataFrame to analyze.\n    :param cat_th: Threshold for categorizing columns as categorical (default: 10).\n                   Columns with fewer than `cat_th` unique values are considered categorical.\n    :param car_th: Threshold for categorizing columns with many unique values as categorical (default: 20).\n                   Columns with more than `car_th` unique values are considered categorical even if their dtype is not \"O\" (object).\n    :return: A tuple containing three lists:\n             - cat_cols: List of column names identified as categorical.\n             - cat_but_car: List of column names initially considered categorical but filtered out due to high cardinality (> car_th).\n             - num_cols: List of column names identified as numerical.\n    \"\"\"\n\n    cat_cols = [col for col in dataframe.columns if dataframe[col].dtypes == \"O\"]\n\n    num_but_cat = [col for col in dataframe.columns if dataframe[col].nunique() < cat_th and\n                   dataframe[col].dtypes != \"O\"]\n\n    cat_but_car = [col for col in dataframe.columns if dataframe[col].nunique() > car_th and\n                   dataframe[col].dtypes == \"O\"]\n\n    cat_cols = cat_cols + num_but_cat\n    cat_cols = [col for col in cat_cols if col not in cat_but_car]\n\n    num_cols = [col for col in dataframe.columns if dataframe[col].dtypes != \"O\"]\n    num_cols = [col for col in num_cols if col not in num_but_cat]\n\n    print(f\"Observations: {dataframe.shape[0]}\")\n    print(f\"Variables: {dataframe.shape[1]}\")\n    print(f'cat_cols: {len(cat_cols)}')\n    print(f'num_cols: {len(num_cols)}')\n    print(f'cat_but_car: {len(cat_but_car)}')\n    print(f'num_but_cat: {len(num_but_cat)}')\n\n    # cat_cols + num_cols + cat_but_car = değişken sayısı.\n    # num_but_cat cat_cols'un içerisinde zaten.\n    # dolayısıyla tüm şu 3 liste ile tüm değişkenler seçilmiş olacaktır: cat_cols + num_cols + cat_but_car\n    # num_but_cat sadece raporlama için verilmiştir.\n\n    return cat_cols, cat_but_car, num_cols\n\ncat_cols, cat_but_car, num_cols = grab_col_names(df)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.317765Z","iopub.execute_input":"2024-05-25T09:06:28.318745Z","iopub.status.idle":"2024-05-25T09:06:28.363875Z","shell.execute_reply.started":"2024-05-25T09:06:28.318703Z","shell.execute_reply":"2024-05-25T09:06:28.362555Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# 2. Kategorik Değişken Analizi (Analysis of Categorical Variables)\n######################################","metadata":{}},{"cell_type":"code","source":"def cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() / len(dataframe)}))\n\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\n\nfor col in cat_cols:\n    cat_summary(df, col)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.365067Z","iopub.execute_input":"2024-05-25T09:06:28.365415Z","iopub.status.idle":"2024-05-25T09:06:28.531304Z","shell.execute_reply.started":"2024-05-25T09:06:28.365384Z","shell.execute_reply":"2024-05-25T09:06:28.529953Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# 3. Sayısal Değişken Analizi (Analysis of Numerical Variables)\n######################################","metadata":{}},{"cell_type":"code","source":"def num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=50)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\n    print(\"#####################################\")","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.532741Z","iopub.execute_input":"2024-05-25T09:06:28.533436Z","iopub.status.idle":"2024-05-25T09:06:28.539760Z","shell.execute_reply.started":"2024-05-25T09:06:28.533396Z","shell.execute_reply":"2024-05-25T09:06:28.538734Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in num_cols:\n    num_summary(df, col, True)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:28.540650Z","iopub.execute_input":"2024-05-25T09:06:28.540990Z","iopub.status.idle":"2024-05-25T09:06:37.435915Z","shell.execute_reply.started":"2024-05-25T09:06:28.540954Z","shell.execute_reply":"2024-05-25T09:06:37.434643Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n######################################\n# 4. Hedef Değişken Analizi (Analysis of Target Variable)\n######################################","metadata":{}},{"cell_type":"code","source":"def target_summary_with_cat(dataframe, target, categorical_col):\n    print(pd.DataFrame({\"TARGET_MEAN\": dataframe.groupby(categorical_col)[target].mean()}), end=\"\\n\\n\\n\")\n\n\nfor col in cat_cols:\n    target_summary_with_cat(df,\"SalePrice\",col)\n\n\n# Bağımlı değişkenin incelenmesi\ndf[\"SalePrice\"].hist(bins=100)\nplt.show()\n\n# Bağımlı değişkenin logaritmasının incelenmesi\nnp.log1p(df['SalePrice']).hist(bins=50)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:37.437376Z","iopub.execute_input":"2024-05-25T09:06:37.437841Z","iopub.status.idle":"2024-05-25T09:06:38.176497Z","shell.execute_reply.started":"2024-05-25T09:06:37.437808Z","shell.execute_reply":"2024-05-25T09:06:38.175403Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# 5. Korelasyon Analizi (Analysis of Correlation)\n######################################","metadata":{}},{"cell_type":"code","source":"corr = df[num_cols].corr()\ncorr","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:38.177838Z","iopub.execute_input":"2024-05-25T09:06:38.178156Z","iopub.status.idle":"2024-05-25T09:06:38.216538Z","shell.execute_reply.started":"2024-05-25T09:06:38.178131Z","shell.execute_reply":"2024-05-25T09:06:38.215312Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Korelasyonların gösterilmesi\nsns.set(rc={'figure.figsize': (12, 12)})\nsns.heatmap(corr, cmap=\"RdBu\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:38.218159Z","iopub.execute_input":"2024-05-25T09:06:38.218471Z","iopub.status.idle":"2024-05-25T09:06:39.144144Z","shell.execute_reply.started":"2024-05-25T09:06:38.218446Z","shell.execute_reply":"2024-05-25T09:06:39.142846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def high_correlated_cols(dataframe, plot=False, corr_th=0.70):\n    corr = df[num_cols].corr()\n    cor_matrix = corr.abs()\n    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(bool))\n    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]\n    if plot:\n        import seaborn as sns\n        import matplotlib.pyplot as plt\n        sns.set(rc={'figure.figsize': (15, 15)})\n        sns.heatmap(corr, cmap=\"RdBu\")\n        plt.show()\n    return drop_list","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.145438Z","iopub.execute_input":"2024-05-25T09:06:39.145800Z","iopub.status.idle":"2024-05-25T09:06:39.154084Z","shell.execute_reply.started":"2024-05-25T09:06:39.145771Z","shell.execute_reply":"2024-05-25T09:06:39.152941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"high_correlated_cols(df, plot=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.155684Z","iopub.execute_input":"2024-05-25T09:06:39.156627Z","iopub.status.idle":"2024-05-25T09:06:39.181784Z","shell.execute_reply.started":"2024-05-25T09:06:39.156591Z","shell.execute_reply":"2024-05-25T09:06:39.180498Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# Görev 2 : Feature Engineering\n######################################","metadata":{}},{"cell_type":"code","source":"######################################\n# Aykırı Değer Analizi\n######################################","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.183178Z","iopub.execute_input":"2024-05-25T09:06:39.183549Z","iopub.status.idle":"2024-05-25T09:06:39.188435Z","shell.execute_reply.started":"2024-05-25T09:06:39.183521Z","shell.execute_reply":"2024-05-25T09:06:39.187662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Aykırı değerlerin baskılanması\ndef outlier_thresholds(dataframe, variable, low_quantile=0.10, up_quantile=0.90):\n    quantile_one = dataframe[variable].quantile(low_quantile)\n    quantile_three = dataframe[variable].quantile(up_quantile)\n    interquantile_range = quantile_three - quantile_one\n    up_limit = quantile_three + 1.5 * interquantile_range\n    low_limit = quantile_one - 1.5 * interquantile_range\n    return low_limit, up_limit","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.189787Z","iopub.execute_input":"2024-05-25T09:06:39.190362Z","iopub.status.idle":"2024-05-25T09:06:39.200654Z","shell.execute_reply.started":"2024-05-25T09:06:39.190330Z","shell.execute_reply":"2024-05-25T09:06:39.199502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Aykırı değer kontrolü\ndef check_outlier(dataframe, col_name):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name)\n    if dataframe[(dataframe[col_name] > up_limit) | (dataframe[col_name] < low_limit)].any(axis=None):\n        return True\n    else:\n        return False\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.201978Z","iopub.execute_input":"2024-05-25T09:06:39.202359Z","iopub.status.idle":"2024-05-25T09:06:39.217087Z","shell.execute_reply.started":"2024-05-25T09:06:39.202300Z","shell.execute_reply":"2024-05-25T09:06:39.215786Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in num_cols:\n    if col != \"SalePrice\":\n      print(col, check_outlier(df, col))","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.218819Z","iopub.execute_input":"2024-05-25T09:06:39.219819Z","iopub.status.idle":"2024-05-25T09:06:39.301213Z","shell.execute_reply.started":"2024-05-25T09:06:39.219776Z","shell.execute_reply":"2024-05-25T09:06:39.300045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Aykırı değerlerin baskılanması\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.302805Z","iopub.execute_input":"2024-05-25T09:06:39.303139Z","iopub.status.idle":"2024-05-25T09:06:39.309481Z","shell.execute_reply.started":"2024-05-25T09:06:39.303112Z","shell.execute_reply":"2024-05-25T09:06:39.308002Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in num_cols:\n    if col != \"SalePrice\":\n        replace_with_thresholds(df,col)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.310806Z","iopub.execute_input":"2024-05-25T09:06:39.311136Z","iopub.status.idle":"2024-05-25T09:06:39.388032Z","shell.execute_reply.started":"2024-05-25T09:06:39.311108Z","shell.execute_reply":"2024-05-25T09:06:39.386730Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# Eksik Değer Analizi\n######################################","metadata":{}},{"cell_type":"code","source":"def missing_values_table(dataframe, na_name=False):\n    na_columns = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n\n    n_miss = dataframe[na_columns].isnull().sum().sort_values(ascending=False)\n\n    ratio = (dataframe[na_columns].isnull().sum() / dataframe.shape[0] * 100).sort_values(ascending=False)\n\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n\n    print(missing_df, end=\"\\n\")\n\n    if na_name:\n        return na_columns","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.389434Z","iopub.execute_input":"2024-05-25T09:06:39.389975Z","iopub.status.idle":"2024-05-25T09:06:39.397373Z","shell.execute_reply.started":"2024-05-25T09:06:39.389925Z","shell.execute_reply":"2024-05-25T09:06:39.396151Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_values_table(df)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.398767Z","iopub.execute_input":"2024-05-25T09:06:39.399123Z","iopub.status.idle":"2024-05-25T09:06:39.443436Z","shell.execute_reply.started":"2024-05-25T09:06:39.399095Z","shell.execute_reply":"2024-05-25T09:06:39.442167Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[\"Alley\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.445008Z","iopub.execute_input":"2024-05-25T09:06:39.445389Z","iopub.status.idle":"2024-05-25T09:06:39.454846Z","shell.execute_reply.started":"2024-05-25T09:06:39.445339Z","shell.execute_reply":"2024-05-25T09:06:39.453612Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[\"BsmtQual\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.463407Z","iopub.execute_input":"2024-05-25T09:06:39.463812Z","iopub.status.idle":"2024-05-25T09:06:39.473952Z","shell.execute_reply.started":"2024-05-25T09:06:39.463780Z","shell.execute_reply":"2024-05-25T09:06:39.472907Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bazı değişkenlerdeki boş değerler evin o özelliğe sahip olmadığını ifade etmektedir\nno_cols = [\"Alley\",\"BsmtQual\",\"BsmtCond\",\"BsmtExposure\",\"BsmtFinType1\",\"BsmtFinType2\",\"FireplaceQu\",\n           \"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\"PoolQC\",\"Fence\",\"MiscFeature\"]","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.475293Z","iopub.execute_input":"2024-05-25T09:06:39.475604Z","iopub.status.idle":"2024-05-25T09:06:39.483564Z","shell.execute_reply.started":"2024-05-25T09:06:39.475579Z","shell.execute_reply":"2024-05-25T09:06:39.482735Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Kolonlardaki boşlukların \"No\" ifadesi ile doldurulması\nfor col in no_cols:\n    df[col].fillna(\"No\",inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.484873Z","iopub.execute_input":"2024-05-25T09:06:39.485159Z","iopub.status.idle":"2024-05-25T09:06:39.510625Z","shell.execute_reply.started":"2024-05-25T09:06:39.485135Z","shell.execute_reply":"2024-05-25T09:06:39.509546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"missing_values_table(df)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.512663Z","iopub.execute_input":"2024-05-25T09:06:39.513291Z","iopub.status.idle":"2024-05-25T09:06:39.549545Z","shell.execute_reply.started":"2024-05-25T09:06:39.513251Z","shell.execute_reply":"2024-05-25T09:06:39.548414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bu fonsksiyon eksik değerlerin median veya mean ile doldurulmasını sağlar\n\ndef quick_missing_imp(data, num_method=\"median\", cat_length=20, target=\"SalePrice\"):\n    variables_with_na = [col for col in data.columns if data[col].isnull().sum() > 0]  # Eksik değere sahip olan değişkenler listelenir\n\n    temp_target = data[target]\n\n    print(\"# BEFORE\")\n    print(data[variables_with_na].isnull().sum(), \"\\n\\n\")  # Uygulama öncesi değişkenlerin eksik değerlerinin sayısı\n\n    # değişken object ve sınıf sayısı cat_lengthe eşit veya altındaysa boş değerleri mode ile doldur\n    data = data.apply(lambda x: x.fillna(x.mode()[0]) if (x.dtype == \"O\" and len(x.unique()) <= cat_length) else x, axis=0)\n\n    # num_method mean ise tipi object olmayan değişkenlerin boş değerleri ortalama ile dolduruluyor\n    if num_method == \"mean\":\n        data = data.apply(lambda x: x.fillna(x.mean()) if x.dtype != \"O\" else x, axis=0)\n    # num_method median ise tipi object olmayan değişkenlerin boş değerleri ortalama ile dolduruluyor\n    elif num_method == \"median\":\n        data = data.apply(lambda x: x.fillna(x.median()) if x.dtype != \"O\" else x, axis=0)\n\n    data[target] = temp_target","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.551138Z","iopub.execute_input":"2024-05-25T09:06:39.551985Z","iopub.status.idle":"2024-05-25T09:06:39.560726Z","shell.execute_reply.started":"2024-05-25T09:06:39.551949Z","shell.execute_reply":"2024-05-25T09:06:39.559391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def quick_missing_imp(data, num_method=\"mean\", cat_length=20, target=\"SalePrice\"):\n    variables_with_na = [col for col in data.columns if data[col].isnull().sum() > 0]  # Eksik değere sahip olan değişkenler listelenir\n\n    temp_target = data[target]\n\n    print(\"# BEFORE\")\n    print(data[variables_with_na].isnull().sum(), \"\\n\\n\")  # Uygulama öncesi değişkenlerin eksik değerlerinin sayısı\n\n    # değişken object ve sınıf sayısı cat_lengthe eşit veya altındaysa boş değerleri mode ile doldur\n    data = data.apply(lambda x: x.fillna(x.mode()[0]) if (x.dtype == \"O\" and len(x.unique()) <= cat_length) else x, axis=0)\n\n    # Imputation method messages within the loop\n    for col in variables_with_na:\n        if data[col].dtype != \"O\":\n            print(f\" Imputation method is '{num_method.upper()}' for {col}! \\n\")\n\n    # Impute missing values for numerical variables based on num_method\n    if num_method == \"mean\":\n        data = data.apply(lambda x: x.fillna(x.mean()) if x.dtype != \"O\" else x, axis=0)\n    elif num_method == \"median\":\n        data = data.apply(lambda x: x.fillna(x.median()) if x.dtype != \"O\" else x, axis=0)\n    else:\n        raise ValueError(f\"Invalid num_method: {num_method}. Valid options are 'mean' and 'median'\")\n\n    data[target] = temp_target\n\n    print(\"# AFTER\")\n    print(data[variables_with_na].isnull().sum())  # Uygulama sonrası değişkenlerin eksik değerlerinin sayısı\n\n    return data\n","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.561946Z","iopub.execute_input":"2024-05-25T09:06:39.562701Z","iopub.status.idle":"2024-05-25T09:06:39.573249Z","shell.execute_reply.started":"2024-05-25T09:06:39.562655Z","shell.execute_reply":"2024-05-25T09:06:39.572324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"    #print(\"# AFTER \\n Imputation method is 'MODE' for categorical variables!\")\n    #print(\" Imputation method is '\" + num_method.upper() + \"' for numeric variables! \\n\")\n    #print(data[variables_with_na].isnull().sum(), \"\\n\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.574298Z","iopub.execute_input":"2024-05-25T09:06:39.575139Z","iopub.status.idle":"2024-05-25T09:06:39.588597Z","shell.execute_reply.started":"2024-05-25T09:06:39.575105Z","shell.execute_reply":"2024-05-25T09:06:39.587703Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = quick_missing_imp(df, num_method=\"median\", cat_length=17)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.589662Z","iopub.execute_input":"2024-05-25T09:06:39.590247Z","iopub.status.idle":"2024-05-25T09:06:39.699831Z","shell.execute_reply.started":"2024-05-25T09:06:39.590217Z","shell.execute_reply":"2024-05-25T09:06:39.698657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# Rare analizi yapınız ve rare encoder uygulayınız.\n######################################","metadata":{}},{"cell_type":"code","source":"# Kategorik kolonların dağılımının incelenmesi\n\ndef rare_analyser(dataframe, target, cat_cols):\n    for col in cat_cols:\n        print(col, \":\", len(dataframe[col].value_counts()))\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO\": dataframe[col].value_counts() / len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(col)[target].mean()}), end=\"\\n\\n\\n\")\n\nrare_analyser(df, \"SalePrice\", cat_cols)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.701057Z","iopub.execute_input":"2024-05-25T09:06:39.701917Z","iopub.status.idle":"2024-05-25T09:06:39.980120Z","shell.execute_reply.started":"2024-05-25T09:06:39.701885Z","shell.execute_reply":"2024-05-25T09:06:39.978880Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Nadir sınıfların tespit edilmesi\ndef rare_encoder(dataframe, rare_perc):\n    temp_df = dataframe.copy()\n\n    rare_columns = [col for col in temp_df.columns if temp_df[col].dtypes == 'O'\n                    and (temp_df[col].value_counts() / len(temp_df) < rare_perc).any(axis=None)]\n\n    for var in rare_columns:\n        tmp = temp_df[var].value_counts() / len(temp_df)\n        rare_labels = tmp[tmp < rare_perc].index\n        temp_df[var] = np.where(temp_df[var].isin(rare_labels), 'Rare', temp_df[var])\n\n    return temp_df","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.981417Z","iopub.execute_input":"2024-05-25T09:06:39.981756Z","iopub.status.idle":"2024-05-25T09:06:39.991619Z","shell.execute_reply.started":"2024-05-25T09:06:39.981723Z","shell.execute_reply":"2024-05-25T09:06:39.990276Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rare_encoder(df,0.01)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:39.993446Z","iopub.execute_input":"2024-05-25T09:06:39.994119Z","iopub.status.idle":"2024-05-25T09:06:40.304219Z","shell.execute_reply.started":"2024-05-25T09:06:39.994084Z","shell.execute_reply":"2024-05-25T09:06:40.302989Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"######################################\n# Yeni değişkenler oluşturunuz ve oluşturduğunuz yeni değişkenlerin başına 'NEW' ekleyiniz.\n######################################","metadata":{}},{"cell_type":"code","source":"df[\"NEW_1st*GrLiv\"] = df[\"1stFlrSF\"] * df[\"GrLivArea\"]\n\ndf[\"NEW_Garage*GrLiv\"] = (df[\"GarageArea\"] * df[\"GrLivArea\"])\n\n#df[\"TotalQual\"] = df[[\"OverallQual\", \"OverallCond\", \"ExterQual\", \"ExterCond\", \"BsmtCond\", \"BsmtFinType1\", \"BsmtFinType2\", \"HeatingQC\", \"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageQual\", \"GarageCond\", \"Fence\"]].sum(axis = 1) # 42\n\n# Select the columns\nselected_columns = [\"OverallQual\", \"OverallCond\", \"ExterQual\", \"ExterCond\", \"BsmtCond\", \"BsmtFinType1\", \"BsmtFinType2\", \"HeatingQC\", \"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageQual\", \"GarageCond\", \"Fence\"]\n\n# Convert to numeric before summing (assuming these columns can be numeric)\ndf[\"TotalQual\"] = df[selected_columns].apply(pd.to_numeric, errors='coerce').sum(axis=1)\n\n# Total Floor\ndf[\"NEW_TotalFlrSF\"] = df[\"1stFlrSF\"] + df[\"2ndFlrSF\"] # 32\n\n# Total Finished Basement Area\ndf[\"NEW_TotalBsmtFin\"] = df.BsmtFinSF1 + df.BsmtFinSF2 # 56\n\n# Porch Area\ndf[\"NEW_PorchArea\"] = df.OpenPorchSF + df.EnclosedPorch + df.ScreenPorch + df[\"3SsnPorch\"] + df.WoodDeckSF # 93\n\n# Total House Area\ndf[\"NEW_TotalHouseArea\"] = df.NEW_TotalFlrSF + df.TotalBsmtSF # 156\n\ndf[\"NEW_TotalSqFeet\"] = df.GrLivArea + df.TotalBsmtSF # 35\n\n\n# Lot Ratio\ndf[\"NEW_LotRatio\"] = df.GrLivArea / df.LotArea # 64\n\ndf[\"NEW_RatioArea\"] = df.NEW_TotalHouseArea / df.LotArea # 57\n\ndf[\"NEW_GarageLotRatio\"] = df.GarageArea / df.LotArea # 69\n\n# MasVnrArea\ndf[\"NEW_MasVnrRatio\"] = df.MasVnrArea / df.NEW_TotalHouseArea # 36\n\n# Dif Area\ndf[\"NEW_DifArea\"] = (df.LotArea - df[\"1stFlrSF\"] - df.GarageArea - df.NEW_PorchArea - df.WoodDeckSF) # 73\n\n\ndf[\"NEW_OverallGrade\"] = df[\"OverallQual\"] * df[\"OverallCond\"] # 61\n\n\ndf[\"NEW_Restoration\"] = df.YearRemodAdd - df.YearBuilt # 31\n\ndf[\"NEW_HouseAge\"] = df.YrSold - df.YearBuilt # 73\n\ndf[\"NEW_RestorationAge\"] = df.YrSold - df.YearRemodAdd # 40\n\ndf[\"NEW_GarageAge\"] = df.GarageYrBlt - df.YearBuilt # 17\n\ndf[\"NEW_GarageRestorationAge\"] = np.abs(df.GarageYrBlt - df.YearRemodAdd) # 30\n\ndf[\"NEW_GarageSold\"] = df.YrSold - df.GarageYrBlt # 48","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.306123Z","iopub.execute_input":"2024-05-25T09:06:40.306874Z","iopub.status.idle":"2024-05-25T09:06:40.363868Z","shell.execute_reply.started":"2024-05-25T09:06:40.306838Z","shell.execute_reply":"2024-05-25T09:06:40.362380Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"drop_list = [\"Street\", \"Alley\", \"LandContour\", \"Utilities\", \"LandSlope\",\"Heating\", \"PoolQC\", \"MiscFeature\",\"Neighborhood\"]","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.365268Z","iopub.execute_input":"2024-05-25T09:06:40.365619Z","iopub.status.idle":"2024-05-25T09:06:40.371128Z","shell.execute_reply.started":"2024-05-25T09:06:40.365587Z","shell.execute_reply":"2024-05-25T09:06:40.370037Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# drop_list'teki değişkenlerin düşürülmesi\ndf.drop(drop_list, axis=1, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.372552Z","iopub.execute_input":"2024-05-25T09:06:40.372910Z","iopub.status.idle":"2024-05-25T09:06:40.390242Z","shell.execute_reply.started":"2024-05-25T09:06:40.372880Z","shell.execute_reply":"2024-05-25T09:06:40.389362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.391443Z","iopub.execute_input":"2024-05-25T09:06:40.391934Z","iopub.status.idle":"2024-05-25T09:06:40.452276Z","shell.execute_reply.started":"2024-05-25T09:06:40.391907Z","shell.execute_reply":"2024-05-25T09:06:40.451080Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##################\n# Label Encoding & One-Hot Encoding işlemlerini uygulayınız.\n##################","metadata":{}},{"cell_type":"code","source":"cat_cols, cat_but_car, num_cols = grab_col_names(df)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.453522Z","iopub.execute_input":"2024-05-25T09:06:40.453870Z","iopub.status.idle":"2024-05-25T09:06:40.493522Z","shell.execute_reply.started":"2024-05-25T09:06:40.453840Z","shell.execute_reply":"2024-05-25T09:06:40.492657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def label_encoder(dataframe, binary_col):\n    labelencoder = LabelEncoder()\n    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])\n    return dataframe","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.494813Z","iopub.execute_input":"2024-05-25T09:06:40.495165Z","iopub.status.idle":"2024-05-25T09:06:40.500447Z","shell.execute_reply.started":"2024-05-25T09:06:40.495136Z","shell.execute_reply":"2024-05-25T09:06:40.499265Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"binary_cols = [col for col in df.columns if df[col].dtypes == \"O\" and len(df[col].unique()) == 2]","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.501752Z","iopub.execute_input":"2024-05-25T09:06:40.502294Z","iopub.status.idle":"2024-05-25T09:06:40.521667Z","shell.execute_reply.started":"2024-05-25T09:06:40.502262Z","shell.execute_reply":"2024-05-25T09:06:40.520580Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in binary_cols:\n    label_encoder(df, col)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.522952Z","iopub.execute_input":"2024-05-25T09:06:40.523489Z","iopub.status.idle":"2024-05-25T09:06:40.529764Z","shell.execute_reply.started":"2024-05-25T09:06:40.523459Z","shell.execute_reply":"2024-05-25T09:06:40.528585Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def one_hot_encoder(dataframe, categorical_cols, drop_first=False):\n    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)\n    return dataframe","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.531919Z","iopub.execute_input":"2024-05-25T09:06:40.532239Z","iopub.status.idle":"2024-05-25T09:06:40.543742Z","shell.execute_reply.started":"2024-05-25T09:06:40.532212Z","shell.execute_reply":"2024-05-25T09:06:40.542583Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = one_hot_encoder(df, cat_cols, drop_first=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.544820Z","iopub.execute_input":"2024-05-25T09:06:40.545314Z","iopub.status.idle":"2024-05-25T09:06:40.606046Z","shell.execute_reply.started":"2024-05-25T09:06:40.545284Z","shell.execute_reply":"2024-05-25T09:06:40.604789Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.607341Z","iopub.execute_input":"2024-05-25T09:06:40.607717Z","iopub.status.idle":"2024-05-25T09:06:40.782709Z","shell.execute_reply.started":"2024-05-25T09:06:40.607651Z","shell.execute_reply":"2024-05-25T09:06:40.781191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##################################\n# MODELLEME\n##################################","metadata":{}},{"cell_type":"markdown","source":"##################################\n# GÖREV 3: Model kurma\n##################################","metadata":{}},{"cell_type":"code","source":"#  Train ve Test verisini ayırınız. (SalePrice değişkeni boş olan değerler test verisidir.)\ntrain_df = df[df['SalePrice'].notnull()]\ntest_df = df[df['SalePrice'].isnull()]","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.784204Z","iopub.execute_input":"2024-05-25T09:06:40.784613Z","iopub.status.idle":"2024-05-25T09:06:40.798213Z","shell.execute_reply.started":"2024-05-25T09:06:40.784578Z","shell.execute_reply":"2024-05-25T09:06:40.796923Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = train_df['SalePrice'] # np.log1p(df['SalePrice'])\nX = train_df.drop(['SalePrice'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.800204Z","iopub.execute_input":"2024-05-25T09:06:40.800643Z","iopub.status.idle":"2024-05-25T09:06:40.810473Z","shell.execute_reply.started":"2024-05-25T09:06:40.800604Z","shell.execute_reply":"2024-05-25T09:06:40.809048Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Train verisi ile model kurup, model başarısını değerlendiriniz.\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=17)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.812482Z","iopub.execute_input":"2024-05-25T09:06:40.812866Z","iopub.status.idle":"2024-05-25T09:06:40.824965Z","shell.execute_reply.started":"2024-05-25T09:06:40.812835Z","shell.execute_reply":"2024-05-25T09:06:40.823815Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = [('LR', LinearRegression()),\n          #(\"Ridge\", Ridge()),\n          #(\"Lasso\", Lasso()),\n          #(\"ElasticNet\", ElasticNet()),\n          ('KNN', KNeighborsRegressor()),\n          ('CART', DecisionTreeRegressor()),\n          ('RF', RandomForestRegressor()),\n          #('SVR', SVR()),\n          ('GBM', GradientBoostingRegressor()),\n          (\"XGBoost\", XGBRegressor(objective='reg:squarederror')),\n          (\"LightGBM\", LGBMRegressor())]\n          # (\"CatBoost\", CatBoostRegressor(verbose=False))]\n\nfor name, regressor in models:\n    rmse = np.mean(np.sqrt(-cross_val_score(regressor, X, y, cv=5, scoring=\"neg_mean_squared_error\")))\n    print(f\"RMSE: {round(rmse, 4)} ({name}) \")\n    ","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:06:40.826713Z","iopub.execute_input":"2024-05-25T09:06:40.827496Z","iopub.status.idle":"2024-05-25T09:07:15.336564Z","shell.execute_reply.started":"2024-05-25T09:06:40.827455Z","shell.execute_reply":"2024-05-25T09:07:15.335239Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\"\"\"\nRMSE: 27694.0655 (LR) \nRMSE: 41108.4402 (KNN) \nRMSE: 33714.2496 (CART) \nRMSE: 22728.3134 (RF) \nRMSE: 21746.2036 (GBM) \nRMSE: 23750.4756 (XGBoost) \nRMSE: 21731.1486 (LightGBM) \n\n\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.338428Z","iopub.execute_input":"2024-05-25T09:07:15.338912Z","iopub.status.idle":"2024-05-25T09:07:15.346397Z","shell.execute_reply.started":"2024-05-25T09:07:15.338870Z","shell.execute_reply":"2024-05-25T09:07:15.345248Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['SalePrice'].mean()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.348271Z","iopub.execute_input":"2024-05-25T09:07:15.348661Z","iopub.status.idle":"2024-05-25T09:07:15.364600Z","shell.execute_reply.started":"2024-05-25T09:07:15.348633Z","shell.execute_reply":"2024-05-25T09:07:15.363354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['SalePrice'].std()","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.366045Z","iopub.execute_input":"2024-05-25T09:07:15.366387Z","iopub.status.idle":"2024-05-25T09:07:15.375427Z","shell.execute_reply.started":"2024-05-25T09:07:15.366358Z","shell.execute_reply":"2024-05-25T09:07:15.374646Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"##################\n# BONUS : Log dönüşümü yaparak model kurunuz ve rmse sonuçlarını gözlemleyiniz.\n# Not: Log'un tersini (inverse) almayı unutmayınız.\n##################","metadata":{}},{"cell_type":"code","source":"# Log dönüşümünün gerçekleştirilmesi\ntrain_df = df[df['SalePrice'].notnull()]\ntest_df = df[df['SalePrice'].isnull()]","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.376470Z","iopub.execute_input":"2024-05-25T09:07:15.376803Z","iopub.status.idle":"2024-05-25T09:07:15.392186Z","shell.execute_reply.started":"2024-05-25T09:07:15.376776Z","shell.execute_reply":"2024-05-25T09:07:15.391060Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = np.log1p(train_df['SalePrice'])\nX = train_df.drop(['SalePrice'], axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.393457Z","iopub.execute_input":"2024-05-25T09:07:15.393781Z","iopub.status.idle":"2024-05-25T09:07:15.402463Z","shell.execute_reply.started":"2024-05-25T09:07:15.393755Z","shell.execute_reply":"2024-05-25T09:07:15.401294Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Verinin eğitim ve tet verisi olarak bölünmesi\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=17)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.406016Z","iopub.execute_input":"2024-05-25T09:07:15.406347Z","iopub.status.idle":"2024-05-25T09:07:15.417858Z","shell.execute_reply.started":"2024-05-25T09:07:15.406321Z","shell.execute_reply":"2024-05-25T09:07:15.416756Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#lgbm_tuned = LGBMRegressor(**lgbm_gs_best.best_params_).fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.419333Z","iopub.execute_input":"2024-05-25T09:07:15.419795Z","iopub.status.idle":"2024-05-25T09:07:15.425581Z","shell.execute_reply.started":"2024-05-25T09:07:15.419755Z","shell.execute_reply":"2024-05-25T09:07:15.424407Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lgbm = LGBMRegressor().fit(X_train, y_train)\ny_pred = lgbm.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.426806Z","iopub.execute_input":"2024-05-25T09:07:15.427232Z","iopub.status.idle":"2024-05-25T09:07:15.811506Z","shell.execute_reply.started":"2024-05-25T09:07:15.427195Z","shell.execute_reply":"2024-05-25T09:07:15.810264Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.812853Z","iopub.execute_input":"2024-05-25T09:07:15.813294Z","iopub.status.idle":"2024-05-25T09:07:15.823074Z","shell.execute_reply.started":"2024-05-25T09:07:15.813255Z","shell.execute_reply":"2024-05-25T09:07:15.821902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Yapılan LOG dönüşümünün tersinin (inverse'nin) alınması\nnew_y = np.expm1(y_pred)\nnew_y\nnew_y_test = np.expm1(y_test)\nnew_y_test","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.824605Z","iopub.execute_input":"2024-05-25T09:07:15.824987Z","iopub.status.idle":"2024-05-25T09:07:15.840004Z","shell.execute_reply.started":"2024-05-25T09:07:15.824957Z","shell.execute_reply":"2024-05-25T09:07:15.838660Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(new_y_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.841166Z","iopub.execute_input":"2024-05-25T09:07:15.841479Z","iopub.status.idle":"2024-05-25T09:07:15.850817Z","shell.execute_reply.started":"2024-05-25T09:07:15.841455Z","shell.execute_reply":"2024-05-25T09:07:15.849583Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(new_y)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.852567Z","iopub.execute_input":"2024-05-25T09:07:15.853269Z","iopub.status.idle":"2024-05-25T09:07:15.862932Z","shell.execute_reply.started":"2024-05-25T09:07:15.853237Z","shell.execute_reply":"2024-05-25T09:07:15.861498Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#np.sqrt(mean_squared_error(new_y_test, new_y))\n\n# RMSE : 22118.413146021652","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.864331Z","iopub.execute_input":"2024-05-25T09:07:15.864786Z","iopub.status.idle":"2024-05-25T09:07:15.871289Z","shell.execute_reply.started":"2024-05-25T09:07:15.864733Z","shell.execute_reply":"2024-05-25T09:07:15.870469Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Clip outliers (adjust max_value as needed)\nclipped_y_test = np.clip(new_y_test, -100000, 100000)\nclipped_y = np.clip(new_y, -100000, 100000)\n\nrmse = np.sqrt(mean_squared_error(clipped_y_test, clipped_y))","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.872792Z","iopub.execute_input":"2024-05-25T09:07:15.873149Z","iopub.status.idle":"2024-05-25T09:07:15.885394Z","shell.execute_reply.started":"2024-05-25T09:07:15.873120Z","shell.execute_reply":"2024-05-25T09:07:15.884200Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(rmse)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.886572Z","iopub.execute_input":"2024-05-25T09:07:15.887259Z","iopub.status.idle":"2024-05-25T09:07:15.895738Z","shell.execute_reply.started":"2024-05-25T09:07:15.887219Z","shell.execute_reply":"2024-05-25T09:07:15.894813Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n##################\n# hiperparametre optimizasyonlarını gerçekleştiriniz.\n##################","metadata":{}},{"cell_type":"code","source":"lgbm_model = LGBMRegressor(random_state=46)\n\nrmse = np.mean(np.sqrt(-cross_val_score(lgbm_model, X, y, cv=5, scoring=\"neg_mean_squared_error\")))","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:15.897072Z","iopub.execute_input":"2024-05-25T09:07:15.897402Z","iopub.status.idle":"2024-05-25T09:07:17.586563Z","shell.execute_reply.started":"2024-05-25T09:07:15.897366Z","shell.execute_reply":"2024-05-25T09:07:17.585307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lgbm_params = {\"learning_rate\": [0.01, 0.1],\n               \"n_estimators\": [500, 1500]\n               #\"colsample_bytree\": [0.5, 0.7, 1]\n             }","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:17.587979Z","iopub.execute_input":"2024-05-25T09:07:17.588300Z","iopub.status.idle":"2024-05-25T09:07:17.593488Z","shell.execute_reply.started":"2024-05-25T09:07:17.588274Z","shell.execute_reply":"2024-05-25T09:07:17.592459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lgbm_gs_best = GridSearchCV(lgbm_model,\n                            lgbm_params,\n                            cv=3,\n                            n_jobs=-1,\n                            verbose=True).fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:17.594396Z","iopub.execute_input":"2024-05-25T09:07:17.594721Z","iopub.status.idle":"2024-05-25T09:07:50.383181Z","shell.execute_reply.started":"2024-05-25T09:07:17.594668Z","shell.execute_reply":"2024-05-25T09:07:50.382116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_model = lgbm_model.set_params(**lgbm_gs_best.best_params_).fit(X, y)\n\nrmse = np.mean(np.sqrt(-cross_val_score(final_model, X, y, cv=5, scoring=\"neg_mean_squared_error\")))","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:07:50.384544Z","iopub.execute_input":"2024-05-25T09:07:50.384865Z","iopub.status.idle":"2024-05-25T09:08:01.197516Z","shell.execute_reply.started":"2024-05-25T09:07:50.384840Z","shell.execute_reply":"2024-05-25T09:08:01.196586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"################################################################\n# Değişkenlerin önem düzeyini belirten feature_importance fonksiyonunu kullanarak özelliklerin sıralamasını çizdiriniz.\n################################################################","metadata":{}},{"cell_type":"code","source":"# feature importance\ndef plot_importance(model, features, num=len(X), save=False):\n\n    feature_imp = pd.DataFrame({\"Value\": model.feature_importances_, \"Feature\": features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False)[0:num])\n    plt.title(\"Features\")\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig(\"importances.png\")\n\nmodel = LGBMRegressor()\nmodel.fit(X, y)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:08:01.198721Z","iopub.execute_input":"2024-05-25T09:08:01.199552Z","iopub.status.idle":"2024-05-25T09:08:01.634389Z","shell.execute_reply.started":"2024-05-25T09:08:01.199521Z","shell.execute_reply":"2024-05-25T09:08:01.633179Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_importance(model, X)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:08:01.635871Z","iopub.execute_input":"2024-05-25T09:08:01.636279Z","iopub.status.idle":"2024-05-25T09:08:04.938289Z","shell.execute_reply.started":"2024-05-25T09:08:01.636240Z","shell.execute_reply":"2024-05-25T09:08:04.936940Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"########################################\n# test dataframeindeki boş olan salePrice değişkenlerini tahminleyiniz ve\n# Kaggle sayfasına submit etmeye uygun halde bir dataframe oluşturunuz. (Id, SalePrice)\n########################################","metadata":{}},{"cell_type":"code","source":"model = LGBMRegressor()\nmodel.fit(X, y)\npredictions = model.predict(test_df.drop([\"SalePrice\"], axis=1))","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:08:04.939740Z","iopub.execute_input":"2024-05-25T09:08:04.940069Z","iopub.status.idle":"2024-05-25T09:08:05.389139Z","shell.execute_reply.started":"2024-05-25T09:08:04.940043Z","shell.execute_reply":"2024-05-25T09:08:05.388175Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dictionary = {\"Id\":test_df.index, \"SalePrice\":predictions}\ndfSubmission = pd.DataFrame(dictionary)\ndfSubmission.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:08:05.390401Z","iopub.execute_input":"2024-05-25T09:08:05.390946Z","iopub.status.idle":"2024-05-25T09:08:05.402182Z","shell.execute_reply.started":"2024-05-25T09:08:05.390916Z","shell.execute_reply":"2024-05-25T09:08:05.400942Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#import os\n#os.remove('/kaggle/working/submission.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-25T09:08:05.404159Z","iopub.execute_input":"2024-05-25T09:08:05.405143Z","iopub.status.idle":"2024-05-25T09:08:05.409712Z","shell.execute_reply.started":"2024-05-25T09:08:05.405101Z","shell.execute_reply":"2024-05-25T09:08:05.408492Z"},"trusted":true},"execution_count":null,"outputs":[]}]}